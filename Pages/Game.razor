@page "/game"
@using System;
@using Project_Tetris_cs.Data;
@using System.Threading;
@using System.Threading.Tasks;

@code {
    private bool dirty = false;
    Grid grid = new Grid(20, 10);
    Tetris tetrisPiece = new Tetris();
    public bool placePiece(int indexRow, int indexColumn) {
        bool result = false;
        for (int indexshape = 0; indexshape < tetrisPiece.block.shape.Length; indexshape++) {
            if (grid.finallyGrid[indexRow, indexColumn] == tetrisPiece.block.shape[indexshape]) {
                result = true;
            }
        }
        return result;
    }

    bool IsGameRunning = false;
    bool IsPause = false;
    bool verifyButton = true;

    public async void gameIsPause(){
        IsPause = true;
        await OnButtonClicked();
        StateHasChanged();
    }
    public async void movePieceDownAsync() {
        IsGameRunning = true;
        IsPause = false;
        verifyButton = false;
        await OnButtonClicked();
        
        StateHasChanged();

        var tokenSource = new CancellationTokenSource();
        var token = tokenSource.Token;
        @* Boucle infini *@
        while (true) {
            if (IsPause == false) {
                tetrisPiece.block.movePieceDown();
                @* StateHasChanged notifie le composant que son état a changé. *@
                this.StateHasChanged();
                @* Task.Delay fait office de timer *@
                await Task.Delay(1500);
            } else {
                IsGameRunning = false;
                verifyButton = true;
                StateHasChanged();
                tokenSource.Cancel();
                break;
            }
        }
    }


    Task OnButtonClicked() {
        return Task.Delay(0);
    }
}

<div class="title">
    <img src="/img/Tetris_Title.png">
</div>

<div class="phone_outline">
    <div class="button">
        <div class="button_b">
            <button type="submit" @onclick="@movePieceDownAsync" disabled=@IsGameRunning class="play"><img src="https://img.icons8.com/ios-filled/50/000000/play--v1.png"/></button>
            <button type="submit" @onclick="@gameIsPause" disabled=@IsPause class="pause"><img src="https://img.icons8.com/ios-filled/50/000000/pause--v1.png"/></button>
            <button type="submit" @onclick="@tetrisPiece.block.movePieceLeft" disabled=@verifyButton class="left"><img src="https://img.icons8.com/ios-filled/50/000000/left.png"/></button>
            <button type="submit" @onclick="@tetrisPiece.block.movePieceRight" disabled=@verifyButton class="right"><img src="https://img.icons8.com/ios-filled/50/000000/right--v1.png"/></button>
            <button type="submit" @onclick="@tetrisPiece.block.movePieceDown" disabled=@verifyButton class="down"><img src="https://img.icons8.com/ios-filled/50/000000/down--v2.png"/></button>
        </div>
    </div>
    <img class="phone" src="/img/iphone_x.png">
    <div class="background">
        <img class="background_b" src="/img/background.png">
        <div class="grid">
            <div class="tetris-container" tabindex="0">
                @for (int indexRow = grid.row-1; indexRow >= 0; indexRow--)
                {
                    <div class="tetris-row">
                        @for (int indexColumn = 0; indexColumn < grid.column; indexColumn++)
                        {
                            @if (placePiece(indexRow, indexColumn)) {
                                <td class="tetromino">@grid.finallyGrid[indexRow, indexColumn]</td>
                            } else {
                                <td class="notetromino">@grid.finallyGrid[indexRow, indexColumn]</td>
                            }
                        }
                    </div>
                }
            </div>
            
        </div>
    </div>


    <a href="/accueil"><img class="back" src="/img/BackBtn.png"></a>

    <div class="row">
        <div class="col">
            <div class="tetris-container" tabindex="0">
            </div>
        </div>
    </div>
</div>